Index: .
===================================================================
--- .	(revision 86520)
+++ .	(working copy)
@@ -22,7 +22,7 @@
 #include <boost/iterator/counting_iterator.hpp>
 #include <boost/random/uniform_int.hpp>
 #include <boost/shared_ptr.hpp>
-#include <typeinfo>
+#include <boost/type_index/type_info.hpp>
 
 namespace boost { namespace parallel {
 
@@ -71,7 +71,7 @@
 
     virtual void* address() { return &distribution_; }
     virtual const void* address() const { return &distribution_; }
-    virtual const std::type_info& type() const { return typeid(Distribution); }
+    virtual const boost::type_info& type() const { return boost::type_id<Distribution>(); }
 
   private:
     Distribution distribution_;
@@ -106,7 +106,7 @@
   template<typename T>
   T* as()
   {
-    if (distribution_->type() == typeid(T))
+    if (distribution_->type() == boost::type_id<T>())
       return static_cast<T*>(distribution_->address());
     else
       return 0;
@@ -115,7 +115,7 @@
   template<typename T>
   const T* as() const
   {
-    if (distribution_->type() == typeid(T))
+    if (distribution_->type() == boost::type_id<T>())
       return static_cast<T*>(distribution_->address());
     else
       return 0;
