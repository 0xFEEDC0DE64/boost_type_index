Index: .
===================================================================
--- .	(revision 86520)
+++ .	(working copy)
@@ -18,7 +18,7 @@
 #include <boost/type_traits/is_convertible.hpp>
 #include <boost/graph/dll_import_export.hpp>
 #include <boost/graph/graphviz.hpp> // for exceptions
-#include <typeinfo>
+#include <boost/type_index/type_info.hpp>
 #include <boost/mpl/bool.hpp>
 #include <boost/mpl/vector.hpp>
 #include <boost/mpl/find.hpp>
@@ -218,16 +218,16 @@
 class get_type_name
 {
 public:
-    get_type_name(const std::type_info& type, const char** type_names, std::string& type_name)
+    get_type_name(const boost::type_info& type, const char** type_names, std::string& type_name)
         : m_type(type), m_type_names(type_names), m_type_name(type_name) {}
     template <typename Type>
     void operator()(Type)
     {
-        if (typeid(Type) == m_type)
+        if (boost::type_id<Type>() == m_type)
             m_type_name = m_type_names[mpl::find<Types,Type>::type::pos::value];
     }
 private:
-    const std::type_info &m_type;
+    const boost::type_info &m_type;
     const char** m_type_names;
     std::string &m_type_name;
 };
@@ -262,18 +262,18 @@
     for (dynamic_properties::const_iterator i = dp.begin(); i != dp.end(); ++i)
     {
         std::string key_id = "key" + lexical_cast<std::string>(key_count++);
-        if (i->second->key() == typeid(Graph*))
+        if (i->second->key() == boost::type_id<Graph*>())
             graph_key_ids[i->first] = key_id;
-        else if (i->second->key() == typeid(vertex_descriptor))
+        else if (i->second->key() == boost::type_id<vertex_descriptor>())
             vertex_key_ids[i->first] = key_id;
-        else if (i->second->key() == typeid(edge_descriptor))
+        else if (i->second->key() == boost::type_id<edge_descriptor>())
             edge_key_ids[i->first] = key_id;
         else
             continue;
         std::string type_name = "string";
         mpl::for_each<value_types>(get_type_name<value_types>(i->second->value(), type_names, type_name));
         out << "  <key id=\"" << encode_char_entities(key_id) << "\" for=\""
-            << (i->second->key() == typeid(Graph*) ? "graph" : (i->second->key() == typeid(vertex_descriptor) ? "node" : "edge")) << "\""
+            << (i->second->key() == boost::type_id<Graph*>() ? "graph" : (i->second->key() == boost::type_id<vertex_descriptor>() ? "node" : "edge")) << "\""
             << " attr.name=\"" << i->first << "\""
             << " attr.type=\"" << type_name << "\""
             << " />\n";
@@ -287,7 +287,7 @@
     // Output graph data
     for (dynamic_properties::const_iterator i = dp.begin(); i != dp.end(); ++i)
     {
-        if (i->second->key() == typeid(Graph*))
+        if (i->second->key() == boost::type_id<Graph*>())
         {
             // The const_cast here is just to get typeid correct for property
             // map key; the graph should not be mutated using it.
@@ -304,7 +304,7 @@
         // Output data
         for (dynamic_properties::const_iterator i = dp.begin(); i != dp.end(); ++i)
         {
-            if (i->second->key() == typeid(vertex_descriptor))
+            if (i->second->key() == boost::type_id<vertex_descriptor>())
             {
                 out << "      <data key=\"" << vertex_key_ids[i->first] << "\">"
                     << encode_char_entities(i->second->get_string(*v)) << "</data>\n";
@@ -325,7 +325,7 @@
         // Output data
         for (dynamic_properties::const_iterator i = dp.begin(); i != dp.end(); ++i)
         {
-            if (i->second->key() == typeid(edge_descriptor))
+            if (i->second->key() == boost::type_id<edge_descriptor>())
             {
                 out << "      <data key=\"" << edge_key_ids[i->first] << "\">"
                     << encode_char_entities(i->second->get_string(*e)) << "</data>\n";
