Index: .
===================================================================
--- .	(revision 86520)
+++ .	(working copy)
@@ -15,7 +15,7 @@
 // when:  July 2001, April 2013 - May 2013
 
 #include <algorithm>
-#include <typeinfo>
+#include <boost/type_index/type_info.hpp>
 
 #include "boost/config.hpp"
 #include <boost/type_traits/remove_reference.hpp>
@@ -29,17 +29,6 @@
 #include <boost/type_traits/is_same.hpp>
 #include <boost/type_traits/is_const.hpp>
 
-// See boost/python/type_id.hpp
-// TODO: add BOOST_TYPEID_COMPARE_BY_NAME to config.hpp
-# if defined(__GNUC__) \
- || defined(_AIX) \
- || (   defined(__sgi) && defined(__host_mips)) \
- || (defined(__hpux) && defined(__HP_aCC)) \
- || (defined(linux) && defined(__INTEL_COMPILER) && defined(__ICC))
-#  define BOOST_AUX_ANY_TYPE_ID_NAME
-#include <cstring>
-# endif 
-
 #if defined(_MSC_VER) 
 #pragma warning(push)
 #pragma warning(disable: 4172) // Mistakenly warns: returning address of local variable or temporary
@@ -149,9 +138,9 @@
             any().swap(*this);
         }
 
-        const std::type_info & type() const BOOST_NOEXCEPT
+        const boost::type_info & type() const BOOST_NOEXCEPT
         {
-            return content ? content->type() : typeid(void);
+            return content ? content->type() : boost::type_id<void>();
         }
 
 #ifndef BOOST_NO_MEMBER_TEMPLATE_FRIENDS
@@ -170,7 +159,7 @@
 
         public: // queries
 
-            virtual const std::type_info & type() const BOOST_NOEXCEPT = 0;
+            virtual const boost::type_info & type() const BOOST_NOEXCEPT = 0;
 
             virtual placeholder * clone() const = 0;
 
@@ -194,9 +183,9 @@
 #endif
         public: // queries
 
-            virtual const std::type_info & type() const BOOST_NOEXCEPT
+            virtual const boost::type_info & type() const BOOST_NOEXCEPT
             {
-                return typeid(ValueType);
+                return boost::type_id<ValueType>();
             }
 
             virtual placeholder * clone() const
@@ -237,7 +226,12 @@
         lhs.swap(rhs);
     }
 
-    class BOOST_SYMBOL_VISIBLE bad_any_cast : public std::bad_cast
+    class BOOST_SYMBOL_VISIBLE bad_any_cast : 
+#ifndef BOOST_NO_RTTI
+        public std::bad_cast
+#else
+        public std::exception
+#endif
     {
     public:
         virtual const char * what() const BOOST_NOEXCEPT_OR_NOTHROW
@@ -251,11 +245,7 @@
     ValueType * any_cast(any * operand) BOOST_NOEXCEPT
     {
         return operand && 
-#ifdef BOOST_AUX_ANY_TYPE_ID_NAME
-            std::strcmp(operand->type().name(), typeid(ValueType).name()) == 0
-#else
-            operand->type() == typeid(ValueType)
-#endif
+            operand->type() == boost::type_id<ValueType>()
             ? &static_cast<any::holder<ValueType> *>(operand->content)->held
             : 0;
     }
